---
import '~/styles/index.css'
// https://sivan.github.io/heti
import '~/styles/heti.min.css'
import Header from '~/components/Header.astro'
import Footer from '~/components/Footer.astro'
import { SEO } from 'astro-seo'
import { getImage } from 'astro:assets'

interface Props {
  title?: string
  desc?: string
  banner?: ImageMetadata
}

const props = Astro.props
const themeConfig = Astro.locals.config
const { header } = Astro.locals.config

const title = props.title ?? themeConfig.title
const desc = props.desc ?? themeConfig.desc
const canonical = themeConfig.website
const iconPath = '/mountains.png'

const image =
  props.banner &&
  (await getImage({
    src: props.banner,
    format: "jpeg"
  }))
const optimizedImage = new URL(image?.src??"/placeholder.png", Astro.url).toString()
---

<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <script is:inline async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6754312885977055"
     crossorigin="anonymous"></script>
    <SEO
      charset="utf-8"
      title={title}
      description={desc}
      extend={{
        link: [{ rel: 'icon', href: iconPath, type: 'image/png' }],
        meta: [
          { name: "twitter:image:src", content: optimizedImage },
          { name: "twitter:image:alt", content: desc },
          { name: "twitter:creator", content: header.twitter },
          { name: "twitter:site", content: header.twitter },
          { name: "twitter:card", content: "summary_large_image" },
          { name: "twitter:title", content: title },
          { name: "twitter:description", content: desc },
        ],
      }}
      openGraph={{
        basic: {
          title: title,
          type: "article",
          image: optimizedImage,
          url: canonical,
        }
      }}
    />
    <link rel="icon" type="image/png" href={iconPath} />
    <link rel="apple-touch-icon" href={iconPath} />
  </head>
  <body>
    <div un-max-lg="flex flex-col gap-0" un-lg="flex flex-row-reverse justify-center gap-4 px-8" class="container contain-layout m-a">
      <div un-lg="sticky top-0 h-screen py-20 animate-fadein-left gap-8 min-h-screen" un-lg:flex="~ col justify-between items-start gap-4" class="px-7.5 pt-1 pb-0" un-max-lg="pt-0 pb-4">
        <Header />
        <Footer class="max-lg:hidden" />
      </div>
      <main un-lg="py-20 w-3xl animate-fadein-down" class="px-7.5 pt-0 pb-3" un-max-lg="pb-1">
        <slot />
      </main>
      <Footer class="lg:hidden p-7.5" un-max-lg="p-0.5" />
    </div>
    <script is:inline>
      (() => {
        if (typeof window === 'undefined') return;

        const overlayClass = 'image-fullscreen-backdrop';
        const visibleClass = 'is-visible';
        const boundFlag = 'fullscreenBound';
        const groupDataKey = 'fullscreenGroup';
        const indexDataKey = 'fullscreenIndex';
        const scopeAttr = 'data-fullscreen-scope';
        const scopeSelector = `[${scopeAttr}]`;
        const scopeIdKey = 'fullscreenScopeId';

        let overlay;
        let overlayImg;
        let prevButton;
        let nextButton;
        let overlayListenersBound = false;
        let currentGroupId = '';
        let currentIndex = -1;
        let previousOverflow = '';
        let scopeCounter = 0;
        const groups = new Map();

        function updateNavState(group) {
          if (!prevButton || !nextButton) return;

          if (!group || group.length <= 1) {
            prevButton.style.visibility = 'hidden';
            nextButton.style.visibility = 'hidden';
            prevButton.disabled = true;
            nextButton.disabled = true;
            return;
          }

          prevButton.style.visibility = 'visible';
          nextButton.style.visibility = 'visible';
          prevButton.disabled = currentIndex <= 0;
          nextButton.disabled = currentIndex >= group.length - 1;
        }

        function closeOverlay() {
          if (!overlay || !overlayImg || !overlay.classList.contains(visibleClass)) return;
          overlay.classList.remove(visibleClass);
          overlay.setAttribute('aria-hidden', 'true');
          overlayImg.removeAttribute('src');
          overlayImg.alt = '';
          currentGroupId = '';
          currentIndex = -1;
          document.body.style.overflow = previousOverflow;
          previousOverflow = '';
          updateNavState([]);
        }

        function ensureOverlay() {
          if (!overlay) {
            overlay = document.createElement('div');
            overlay.className = overlayClass;
            overlay.setAttribute('aria-hidden', 'true');
            overlay.innerHTML = `
              <button type="button" class="image-fullscreen-nav image-fullscreen-prev" aria-label="上一张">
                <span>&#10094;</span>
              </button>
              <div class="image-fullscreen-media">
                <img alt="" />
              </div>
              <button type="button" class="image-fullscreen-nav image-fullscreen-next" aria-label="下一张">
                <span>&#10095;</span>
              </button>
            `;
            document.body.appendChild(overlay);
          }

          overlayImg = overlay.querySelector('.image-fullscreen-media img');
          prevButton = overlay.querySelector('.image-fullscreen-prev');
          nextButton = overlay.querySelector('.image-fullscreen-next');

          if (!overlayListenersBound) {
            overlay.addEventListener('click', closeOverlay);
            const media = overlay.querySelector('.image-fullscreen-media');
            media?.addEventListener('click', (event) => event.stopPropagation());
            prevButton?.addEventListener('click', (event) => {
              event.preventDefault();
              event.stopPropagation();
              showPrevious();
            });
            nextButton?.addEventListener('click', (event) => {
              event.preventDefault();
              event.stopPropagation();
              showNext();
            });
            overlayImg?.addEventListener('click', (event) => {
              event.preventDefault();
              event.stopPropagation();
              closeOverlay();
            });
            overlayListenersBound = true;
          }
        }

        function resolveGroupId(img) {
          const scopeElement = img.closest(scopeSelector);
          if (scopeElement) {
            if (!scopeElement.dataset[scopeIdKey]) {
              scopeCounter += 1;
              scopeElement.dataset[scopeIdKey] = `scope-${scopeCounter}`;
            }
            return scopeElement.dataset[scopeIdKey];
          }
          return 'scope-page';
        }

        function rebuildGroups() {
          groups.clear();
          const images = Array.from(document.querySelectorAll('img')).filter((image) => {
            return !image.closest(`.${overlayClass}`);
          });

          images.forEach((image) => {
            const groupId = resolveGroupId(image);
            if (!groups.has(groupId)) {
              groups.set(groupId, []);
            }
            groups.get(groupId).push(image);
          });

          groups.forEach((collection, groupId) => {
            collection.forEach((image, index) => {
              image.dataset[groupDataKey] = groupId;
              image.dataset[indexDataKey] = String(index);
            });
          });
        }

        function bindImage(img) {
          if (img.dataset[boundFlag] === 'true') return;
          if (img.closest(`.${overlayClass}`)) return;
          img.dataset[boundFlag] = 'true';
          img.addEventListener('click', (event) => {
            if (event.button !== 0) return;
            event.preventDefault();
            event.stopPropagation();
            openOverlay(img);
          });
        }

        function scanImages() {
          document.querySelectorAll('img').forEach((img) => {
            if (img.closest(`.${overlayClass}`)) return;
            bindImage(img);
          });
          rebuildGroups();
        }

        function showImageAtCurrentIndex() {
          if (!overlay || !overlayImg) return;
          const group = groups.get(currentGroupId);
          if (!group || !group.length) {
            closeOverlay();
            return;
          }

          if (currentIndex < 0) currentIndex = 0;
          if (currentIndex >= group.length) currentIndex = group.length - 1;

          const targetImg = group[currentIndex];
          overlayImg.src = targetImg.currentSrc || targetImg.src;
          overlayImg.alt = targetImg.alt || '';
          updateNavState(group);
        }

        function openOverlay(img) {
          ensureOverlay();
          rebuildGroups();

          const groupId = img.dataset[groupDataKey] || resolveGroupId(img);
          const group = groups.get(groupId);

          if (!group || !group.length) return;

          currentGroupId = groupId;
          currentIndex = group.indexOf(img);
          if (currentIndex === -1) {
            currentIndex = Number(img.dataset[indexDataKey] || 0);
          }

          previousOverflow = document.body.style.overflow;
          document.body.style.overflow = 'hidden';
          overlay.classList.add(visibleClass);
          overlay.setAttribute('aria-hidden', 'false');
          showImageAtCurrentIndex();
        }

        function showPrevious() {
          if (currentIndex <= 0) return;
          currentIndex -= 1;
          showImageAtCurrentIndex();
        }

        function showNext() {
          const group = groups.get(currentGroupId);
          if (!group) return;
          if (currentIndex >= group.length - 1) return;
          currentIndex += 1;
          showImageAtCurrentIndex();
        }

        ensureOverlay();

        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', scanImages, { once: true });
        } else {
          scanImages();
        }

        document.addEventListener('keydown', (event) => {
          if (!overlay || !overlay.classList.contains(visibleClass)) return;
          if (event.key === 'Escape') {
            closeOverlay();
            return;
          }
          if (event.key === 'ArrowLeft') {
            event.preventDefault();
            showPrevious();
          } else if (event.key === 'ArrowRight') {
            event.preventDefault();
            showNext();
          }
        });

        const observer = new MutationObserver(() => {
          scanImages();
        });

        observer.observe(document.body, { childList: true, subtree: true });
      })();
    </script>
  </body>
</html>

<style>
  /* 确保导航栏位置一致性 */
  @media (min-width: 1024px) {
    .container {
      min-height: 100vh;
    }

    /* 确保sticky定位的一致性 */
    [un-lg*="sticky"] {
      position: sticky !important;
      top: 0 !important;
    }
  }
</style>
