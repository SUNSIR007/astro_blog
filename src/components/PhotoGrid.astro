---
import type { CollectionEntry } from 'astro:content'
import Pagination from './Pagination.astro'

export interface Props {
  photos: CollectionEntry<'photos'>[]
  currentPage: number
  totalPages: number
}

const { photos, currentPage, totalPages } = Astro.props

// 按日期排序（最新的在前）
const sortedPhotos = photos.sort((a: CollectionEntry<'photos'>, b: CollectionEntry<'photos'>) =>
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
)
---

<section class="photo-gallery">
  {sortedPhotos.length > 0 ? (
    <div class="photos-grid-display">
      <!-- 照片单列展示 -->
      <div class="photos-list space-y-8 mb-8">
        {sortedPhotos.map((photo: CollectionEntry<'photos'>) => (
          <div class="photo-item">
            <img
              src={photo.data.url}
              alt=""
              class="w-full max-w-4xl mx-auto object-contain"
              loading="lazy"
            />
          </div>
        ))}
      </div>

      <!-- 分页导航 -->
      {totalPages > 1 && (
        <Pagination
          currentPage={currentPage}
          totalPage={totalPages}
          baseUrl="/gallery/page/"
          leftUrl={currentPage === 2 ? '/gallery' : `/gallery/page/${currentPage - 1}`}
          rightUrl={`/gallery/page/${currentPage + 1}`}
          showPageCount={false}
        />
      )}
    </div>
  ) : (
    <div class="empty-state text-center py-16">
      <div class="text-6xl mb-4 opacity-50">📷</div>
      <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
        No photos yet
      </h3>
      <p class="text-gray-600 dark:text-gray-400 mb-4">
        Start adding some photos to your gallery.
      </p>
    </div>
  )}

  <div
    class="lightbox hidden"
    data-role="photo-lightbox"
    role="dialog"
    aria-modal="true"
    aria-label="Photo preview"
    aria-hidden="true"
  >
    <img class="lightbox-image" alt="" />
  </div>
</section>

<script is:inline>
  const setupPhotoLightbox = () => {
    const overlay = document.querySelector('[data-role="photo-lightbox"]')
    if (!overlay || !(overlay instanceof HTMLElement)) return

    const overlayImage = overlay.querySelector('img')
    if (!overlayImage || !(overlayImage instanceof HTMLImageElement)) return

    const disableScroll = () => document.body.classList.add('overflow-hidden')
    const enableScroll = () => document.body.classList.remove('overflow-hidden')

    const closeOverlay = () => {
      overlay.classList.add('hidden')
      overlay.setAttribute('aria-hidden', 'true')
      overlayImage.removeAttribute('src')
      overlayImage.removeAttribute('alt')
      enableScroll()
    }

    const exitFullscreenIfNeeded = () => {
      if (document.fullscreenElement === overlay && document.exitFullscreen) {
        document.exitFullscreen().catch(() => {
          closeOverlay()
        })
      } else {
        closeOverlay()
      }
    }

    const openOverlay = (src, alt) => {
      overlayImage.src = src
      overlayImage.alt = alt || 'Photo preview'
      overlay.classList.remove('hidden')
      overlay.setAttribute('aria-hidden', 'false')
      disableScroll()

      if (overlay.requestFullscreen) {
        overlay.requestFullscreen().catch(() => {
          // Fullscreen API 失败时保持遮罩显示
        })
      }
    }

    document.querySelectorAll('.photo-item img').forEach((img) => {
      if (!(img instanceof HTMLImageElement)) return

      img.addEventListener('click', () => {
        const src = img.currentSrc || img.getAttribute('src') || ''
        openOverlay(src, img.getAttribute('alt') || '')
      })
    })

    overlay.addEventListener('click', (event) => {
      if (event.target === overlay) {
        exitFullscreenIfNeeded()
      }
    })

    overlayImage.addEventListener('click', () => {
      exitFullscreenIfNeeded()
    })

    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && !overlay.classList.contains('hidden')) {
        exitFullscreenIfNeeded()
      }
    })

    document.addEventListener('fullscreenchange', () => {
      if (!document.fullscreenElement) {
        closeOverlay()
      }
    })
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupPhotoLightbox)
  } else {
    setupPhotoLightbox()
  }
</script>

<style>
  .photo-item {
    @apply relative;
  }

  .photo-item img {
    @apply transition-transform duration-300 ease-out hover:scale-[1.01] hover:shadow-xl hover:shadow-black/30 hover:brightness-105;
  }

  .lightbox {
    @apply fixed inset-0 z-50 bg-black/90 backdrop-blur-sm flex items-center justify-center p-4 cursor-zoom-out;
  }

  .lightbox-image {
    @apply max-h-[90vh] max-w-[90vw] object-contain rounded-lg shadow-2xl;
  }

  .pagination a {
    @apply no-underline;
  }
</style>
